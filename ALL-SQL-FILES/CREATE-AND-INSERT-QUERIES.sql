SET SERVEROUTPUT ON;

---------------------------------------------------- LOCATION TABLE  -------------------------------------------
    -- TABLE CREATION PROCEDURE
    create or replace procedure location_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE LOCATION(
                            LOCATION_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            STATE VARCHAR(8) NOT NULL,
                            CITY VARCHAR(50),
                            ZIPCODE VARCHAR(5) NOT NULL UNIQUE,
                            constraint pk_loc_id PRIMARY KEY(LOCATION_ID)
                    )';
       EXECUTE IMMEDIATE table_name;
    end location_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='LOCATION';
            SELECT count(*) into nCount FROM user_tables where table_name = 'LOCATION';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 location_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' ||table_name ||' CREATED');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 location_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_location(state_name in varchar, city_name in varchar, zipcode in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  LOCATION(state, city, zipcode) values (state_name, city_name, zipcode);
             dbms_output.put_line('Row inserted at Location table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Location Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_location;
     /
    
    execute insrt_location('MA','Boston','02115');
    execute insrt_location('TX','DALLAS','04567');
    execute insrt_location('CA','SAN JOSE','08921');
    execute insrt_location('NY','NY CITY','01209');
    
    select * from LOCATION;

    ---------------------------------------------------- HOTEL TABLE  -------------------------------------------

    -- TABLEC REATION PROCEDURE
    create or replace procedure hotel_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE HOTEL(
                            HOTEL_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            HOTEL_NAME VARCHAR2(255) NOT NULL UNIQUE,
                            LOCATION_ID NUMBER,
                            RATING VARCHAR2(50),
                            constraint pk_htl_id PRIMARY KEY(HOTEL_ID),
                            constraint fk_loc_id FOREIGN KEY(LOCATION_ID) REFERENCES location (location_id)
                           
                    )';
       EXECUTE IMMEDIATE table_name;
    end hotel_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='HOTEL';
            SELECT count(*) into nCount FROM user_tables where table_name = 'HOTEL';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 hotel_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE' ||table_name ||' CREATED');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 hotel_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_hotel(hotel_name in varchar, location_id_name in number, rating in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  HOTEL(HOTEL_NAME, LOCATION_ID, RATING) values (hotel_name, location_id_name, rating);
             dbms_output.put_line('Row inserted at HOTEL table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Location Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_hotel;
     /
    
    execute insrt_hotel('Hyatt Regency',1,'3 Star');
    execute insrt_hotel('Hyatt Grand',2,'4 Star');
    execute insrt_hotel('Andaz West Hollywood',3,'3 Star');
    execute insrt_hotel('Grand Hyatt DFW',4,'3 Star');

    select * from hotel;

    ---------------------------------------------------- DISCOUNT TABLE  -------------------------------------------

 -- TABLE CREATION PROCEDURE
    create or replace procedure discount_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE DISCOUNT(
                            disc_id  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            disc_value NUMBER NOT NULL UNIQUE,
                            constraint pk_discount_id PRIMARY KEY(disc_id)
                    )';
       EXECUTE IMMEDIATE table_name;
    end discount_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='DISCOUNT';
            SELECT count(*) into nCount FROM user_tables where table_name = 'DISCOUNT';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 discount_creation;
                end;    
             DBMS_OUTPUT.PUT_LINE('TABLE '||table_name||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 discount_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_discount(disc_value_name in number)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into DISCOUNT(disc_value) values (disc_value_name);
             dbms_output.put_line('Row inserted at Discount table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Location Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_discount;
     /
    
    execute insrt_discount(10);
    execute insrt_discount(15);
    execute insrt_discount(20);
    execute insrt_discount(30);
    execute insrt_discount(40);
    execute insrt_discount(50);
    
    select * from discount;

---------------------------------------------------- MEMBER TABLE  -------------------------------------------
     -- TABLE CREATION PROCEDURE
    create or replace procedure member_table_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table MEMBER(  
                      mem_id NUMBER GENERATED BY DEFAULT AS IDENTITY,  
                      mem_type varchar2(16) NOT NULL unique,
                      mem_renew_date date DEFAULT (sysdate) NOT NULL,
                      disc_id number NOT NULL,
                      constraint pk_mem_id primary key(mem_id),
                      constraint fk_member_id FOREIGN KEY (disc_id) REFERENCES discount (disc_id)
                    )';
       EXECUTE IMMEDIATE table_name;
    end member_table_creation;
    /
    
  DECLARE
        tname varchar2(50);
        nCount NUMBER;
    BEGIN
        tname := 'MEMBER';
        SELECT count(*) into nCount FROM user_tables where table_name = tname;
        IF(nCount > 0)
        
        THEN
               DBMS_OUTPUT.PUT_LINE('TABLE '|| tname ||' ALREADY EXISTS.');
        ELSE
        -- call to table creation stored procedure 
            begin 
             member_table_creation;
            end;    
         DBMS_OUTPUT.PUT_LINE('TABLE '|| tname ||' CREATED.');
        
        END IF;
        exception 
          when no_data_found then
           dbms_output.put_line('table doesnt exits!, So we created one');
           
           -- call to table creation stored procedure 
           begin 
             member_table_creation;
            end; 
            
            when others
                then
                DBMS_OUTPUT.PUT_LINE(nCount);
                dbms_output.put_line('Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
END;
/  

   create or replace procedure insrt_member(mem_type in varchar, mem_renew_date in date, disc_id in number)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into MEMBER(mem_type, mem_renew_date, disc_id) values (mem_type, mem_renew_date, disc_id);
             dbms_output.put_line('Row inserted at Member table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Member Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_member;
     /
    
    execute insrt_member('PLATINUM',TO_DATE('2022/05/11 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),5);
    execute insrt_member('SUPER PLATINUM',TO_DATE('2022/05/03 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),4);
    execute insrt_member('GOLD',TO_DATE('2022/05/17 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_member('SILVER',TO_DATE('2022/05/22 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    
    select * from member;

---------------------------------------------------- PREFERENCES TABLE  -------------------------------------------

 -- TABLE CREATION PROCEDURE
    create or replace procedure preferences_creation is
        table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table PREFERENCES(  
                        prf_id NUMBER GENERATED BY DEFAULT AS IDENTITY,  
                        preferences varchar2(255) NOT NULL,
                        constraint pk_prf_id primary key (prf_id)  
                    )';
    EXECUTE IMMEDIATE table_name;
    end preferences_creation;
    /
    
 -- Drop table preferences;  
    
  DECLARE
        tname varchar2(50);
        nCount NUMBER;
    BEGIN
        tname := 'PREFERENCES';
        SELECT count(*) into nCount FROM user_tables where table_name = tname;
        IF(nCount > 0)
        
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE '||tname ||' ALREADY EXISTS.');
          
        ELSE
        
        -- call to table creation stored procedure 
            begin 
             preferences_creation;
                      DBMS_OUTPUT.PUT_LINE('TABLE '|| tname ||' CREATED.');
            end;    
   
        END IF;
        exception 
          when no_data_found then
           dbms_output.put_line('table doesnt exits!, So we created one');
           
           -- call to table creation stored procedure 
           begin 
             preferences_creation;
            end; 
            
            when others
                then
                dbms_output.put_line('Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
END;
/  

create or replace procedure insrt_preferences(preferences_name in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into PREFERENCES(preferences) values (preferences_name);
             dbms_output.put_line('Row inserted at Location table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            
            exception
                when others then
                    dbms_output.put_line('Error while inserting data in PREFERENCES Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_preferences;
     /
    
    execute insrt_preferences('Guest loves to smoke');
    execute insrt_preferences('Guests Need newspaper every Morning');
    execute insrt_preferences('Guest is allergic to pets');
    execute insrt_preferences('Guest wants rooms with windows facing the pool');
    
    select * from PREFERENCES;

---------------------------------------------------- GUEST TABLE  -------------------------------------------

-- TABLEC REATION PROCEDURE
    create or replace procedure guest_creation is table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table GUEST(  
                    guest_id  NUMBER GENERATED BY DEFAULT AS IDENTITY,  
                    guest_name varchar2(50) NOT NULL,
                    DOB date NOT NULL,
                    ph_num varchar2(16) NOT NULL,
                    email varchar2(255),
                    mem_id number,
                    vip_status varchar(8),
                    gender varchar(8) NOT NULL,
                    prf_id  number,
                    primary key (guest_id),
                    constraint unique_PHONE UNIQUE (PH_NUM),
                    constraint fk_prf_id FOREIGN KEY (prf_id) REFERENCES PREFERENCES(prf_id),
                    constraint fk_mem_id FOREIGN KEY (mem_id) REFERENCES MEMBER(mem_id),
                    CHECK(REGEXP_LIKE(email,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
                    CHECK(REGEXP_LIKE(ph_num,''^[0-9]{10}$''))
                    )';
       EXECUTE IMMEDIATE table_name;
    end guest_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            tname:='GUEST';
             SELECT count(*) into nCount FROM user_tables where table_name = tname;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| tname || ' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 guest_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' || tname ||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('Table '||tname ||' doesnt exits! So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 guest_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
    create or replace procedure insrt_guest(GUEST_NAME in varchar,DOB IN DATE, PH_NUM IN VARCHAR, EMAIL IN VARCHAR2,MEM_ID IN NUMBER, VIP_STATUS IN VARCHAR,GENDER IN VARCHAR, PRF_ID IN VARCHAR)
         as
          begin
          
                 dbms_output.put_line('----------------------------------------------------------');
                insert into GUEST(GUEST_NAME , DOB , PH_NUM, EMAIL,MEM_ID, VIP_STATUS,GENDER, PRF_ID) values (GUEST_NAME  ,DOB  , PH_NUM  , EMAIL,MEM_ID, VIP_STATUS,GENDER, PRF_ID);
             dbms_output.put_line('Row inserted at GUEST table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oops! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in GUEST Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_guest;
     /
    
    execute insrt_guest('PUJA','24 MAY 1996','9851024784','PUZA@GMAIL.COM',4,'VIP-3','FEMALE',1);
    execute insrt_guest('NARENDRA MODI',TO_DATE('1950/08/17', 'yyyy/mm/dd'),'6177927768','NARENDRA.MODI@GMAIL.COM',2,'VIP-1','MALE',2);
    execute insrt_guest('AMIR KHAN',TO_DATE('1965/03/14', 'yyyy/mm/dd'),'8899223344','AMIR@GMAIL.COM',1,'VIP-2','MALE',4);
    execute insrt_guest('MONISH M.',TO_DATE('1995/06/14', 'yyyy/mm/dd'),'1122334455','MONISH@GMAIL.COM',NULL,2,'MALE',NULL);
    execute insrt_guest('JATIN BALI',TO_DATE('1998/05/17', 'yyyy/mm/dd'),'4455667788','JATIN@GMAIL.COM',NULL,NULL,'MALE',3);
    execute insrt_guest('KHUSHBU T',TO_DATE('1994/01/14', 'yyyy/mm/dd'),'5533116688','KHUSHBU@GMAIL.COM',NULL,NULL,'FEMALE',NULL);

    SELECT * FROM GUEST;
    
    ---------------------------------------------------- AMENITY TABLE  -------------------------------------------

     -- TABLE CREATION PROCEDURE
    create or replace procedure amenity_creation is table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE AMENITY(
                        AMENITY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY ,
                        AMENITY_NAME VARCHAR(255) NOT NULL,
                        AMENITY_PRICE FLOAT(5) NOT NULL,
                        IS_PRSN_SPC CHAR(1) NOT NULL,
                        constraint fk_amenity_id primary key(AMENITY_ID)
                    )';
       EXECUTE IMMEDIATE table_name;
    end amenity_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            SELECT count(*) into nCount FROM user_tables where table_name = 'AMENITY';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE AMENITY ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 amenity_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE AMENITY CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 amenity_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_amenity(amenity_name in varchar, price in varchar, prsn_spc in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into AMENITY(amenity_name, amenity_price, IS_PRSN_SPC) values (amenity_name, price, prsn_spc);
             dbms_output.put_line('Row inserted at Amenity table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
            then
            dbms_output.put_line('Oops! This record already exist in Amenity Table');
            rollback;
          --  dbms_output.put_line('The error encountered is: ');
          -- dbms_output.put_line(dbms_utility.format_error_stack);
            rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Amenity Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');

            end insrt_amenity;
     /
    
    execute insrt_amenity('Swimming Pool',0,'n');
    execute insrt_amenity('Recreational Gym',1500,'y');
    execute insrt_amenity('Recreational Spa',2000,'y');
    execute insrt_amenity('Conference Room',2000,'y');
    execute insrt_amenity('Culb Access',1500,'y');
    execute insrt_amenity('Audio Visiual Room',2000,'y');
    execute insrt_amenity('Front View',0,'n');
    execute insrt_amenity('Top View',0,'n');
    execute insrt_amenity('Smooking Room',1000,'n');
    execute insrt_amenity('Top-View',0,'n');
    execute insrt_amenity('TV',1500,'y');
    
    select * from AMENITY;

    ---------------------------------------------------- DEPARTMENT TABLE  -------------------------------------------

    -- TABLE CREATION PROCEDURE
    create or replace procedure dept_creation is
    table_name varchar2(4000);
    
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE DEPARTMENT(
                      DEPT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY ,  
                      DEPT_NAME varchar2(50) NOT NULL UNIQUE,
                      constraint PK_DEPT_ID primary key (DEPT_ID) 
                    )';
                        
    EXECUTE IMMEDIATE table_name;
    end dept_creation;
    /
    
      DECLARE
            tName varchar2(50);
            nCount NUMBER;
        BEGIN
            tName:= 'DEPARTMENT';
            SELECT count(*) into nCount FROM user_tables where table_name = tName;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||tName ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 Dept_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE '|| tName ||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 Dept_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_department (DEPT_NAME_name in varchar)
         as 
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into DEPARTMENT(DEPT_NAME) values (DEPT_NAME_name);
             dbms_output.put_line('Row inserted at DEPARTMENT table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            
             WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists in department table.');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in DEPARTMENT Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_department;
     /
    
    execute insrt_department('Front Desk');
    execute insrt_department('HouseKeeping');
    execute insrt_department('Food and Beverage Service');
    execute insrt_department('Engineering and Maintenance');
    execute insrt_department('Security Department');
    execute insrt_department('Human Resources (HR)');
    
    select * from DEPARTMENT;

    ---------------------------------------------------- DESIGNATION TABLE  -------------------------------------------

    -- TABLEC REATION PROCEDURE
    create or replace procedure designation_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:= 'CREATE TABLE DESIGNATION (
                        DESG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                        DESG_NAME VARCHAR(50) NOT NULL unique,
                        constraint PK_DESG_ID  primary key(DESG_ID)
                        )';

    EXECUTE IMMEDIATE table_name;
    end designation_creation;
    /
    
      DECLARE
            
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:= 'DESIGNATION';
            SELECT count(*) into nCount FROM user_tables where table_name = 'DESIGNATION';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 designation_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE '||TABLE_NAME||' CREATED.');
            
            END IF;
            exception 
            
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 designation_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_designation(DESG_NAME_name in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  DESIGNATION(DESG_NAME) values (DESG_NAME_name);
             dbms_output.put_line('Row inserted at DESIGNATION table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
             WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in DESIGNATION Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_designation;
     /
    
    execute insrt_designation('Duty Manager');
    execute insrt_designation('Team Leader');
    execute insrt_designation('Front Desk Officer');
    execute insrt_designation('Guest Service Officer');
    execute insrt_designation('Senior Guest Service Officer');
    execute insrt_designation('Assistent Front office manager');
    execute insrt_designation('Front Office manager');
    execute insrt_designation('Director of Room');
    execute insrt_designation('Floor Attendant');
    execute insrt_designation('Floor Supervisor');
    execute insrt_designation('Assistent Manager HouseKeeping');
    execute insrt_designation('Deupty House keeper ');
    execute insrt_designation('Executive house keeper');
    
    select * from DESIGNATION;

    ---------------------------------------------------- STAFF TABLE  -------------------------------------------

    -- TABLEC REATION PROCEDURE
    create or replace procedure staff_creation is table_name varchar2(4000);
    BEGIN
    -- table creation query
       table_name:='create table STAFF(
                    STAFF_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                    DESG_ID NUMBER NOT NULL,
                    STAFF_NAME VARCHAR(255) NOT NULL,
                    USR_NM VARCHAR(50) NOT NULL,
                    PASS VARCHAR(50) NOT NULL,
                    DISC_ID NUMBER NOT NULL,
                    DEPT_ID NUMBER NOT NULL,
                    HOTEL_ID NUMBER NOT NULL,
                    primary key(STAFF_ID),
                    constraint FK_DESG_ID FOREIGN key(DESG_ID)REFERENCES DESIGNATION(DESG_ID) ON DELETE CASCADE,
                    constraint FK_DISC_ID  FOREIGN key(DISC_ID)REFERENCES DISCOUNT(DISC_ID) ON DELETE CASCADE,
                    constraint FK_DEPT_ID FOREIGN key(DEPT_ID)REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE, 
                    constraint FK_HOTEL_ID FOREIGN key(HOTEL_ID)REFERENCES HOTEL(HOTEL_ID) ON DELETE CASCADE
                    )';
       EXECUTE IMMEDIATE table_name;
    end staff_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            tname := 'STAFF';
            SELECT count(*) into nCount FROM user_tables where table_name = tname;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE STAFF ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 staff_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE STAFF CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 staff_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_staff(DESG_ID in NUMBER, STAFF_NAME in varchar, USR_NM in varchar, PASS in varchar, DISC_ID IN NUMBER,DEPT_ID IN NUMBER, HOTEL_ID IN NUMBER)
         as
          begin
             dbms_output.put_line('----------------------------------------------------------');
                insert into STAFF(DESG_ID, STAFF_NAME, USR_NM, PASS, DISC_ID, DEPT_ID, HOTEL_ID) values (DESG_ID, STAFF_NAME, USR_NM, PASS, DISC_ID, DEPT_ID, HOTEL_ID);
             dbms_output.put_line('Row inserted at STAFF table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
            then
             dbms_output.put_line('OOPS! DUPLICATE VALUE FOUND');
            rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in STAFF Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');

            end insrt_staff;
     /
    
    execute insrt_staff(1,'JOHN KARL','JHNKRL','JHN',3,1, 1);

    execute insrt_STAFF(1,'JOHN KARL','JHNKRL','PASSWORD1',3,1,1);
    execute insrt_STAFF(1,'Raymond S. Segovia','Ray','PASSWORD2',4,1,1);
    execute insrt_STAFF(2,'Alice M. Lankford','ali','PASSWORD3',2,1,1);
    execute insrt_STAFF(4,'Monika Friedman','Moni','PASSWORD4',1,1,1);
    execute insrt_STAFF(4,'Leo Hussain','LEO','PASSWORD5',3,1,1);
    execute insrt_STAFF(6,'Andrew Johnson','ANDRY','PASSWORD6',6,1,1);
    execute insrt_STAFF(7,'Jordan Fletcher','Jord','PASSWORD7',5,1,1);
    execute insrt_STAFF(9,'Libby McKenzie','LIB','PASSWORD8',2,2,1);
    execute insrt_STAFF(10,'Alexandra Brooks','ALEX','PASSWORD9',2,2,1);
    execute insrt_STAFF(10,'Brandon Baker','BRAND','PASSWORD10',2,2,1);
    execute insrt_STAFF(10,'Rebecca Perry','REB','PASSWORD11',2,2,1);
    execute insrt_STAFF(11,'Connor Johnston','CON','PASSWORD12',3,2,1);
    execute insrt_STAFF(11,'Evie Bryan','EVIE','PASSWORD13',4,2,1);
    execute insrt_STAFF(11,'Sophia Parry','SOP','PASSWORD14',2,2,1);
    execute insrt_STAFF(12,'Jodie Newton','JOD','PASSWORD15',3,2,1);
    execute insrt_STAFF(13,'Adam Lucas','ADAM','PASSWORD16',3,2,1);
    execute insrt_STAFF(3,'Ethan Parsons','ETH','PASSWORD17',2,1,1);
    execute insrt_STAFF(3,'Jennifer Gordon','JEN','PASSWORD18',4,1,1);
    execute insrt_STAFF(3,'Tyler McLean','TYL','PASSWORD19',4,1,1);
    execute insrt_STAFF(6,'Corey Donnelly','COR','PASSWORD20',2,1,1);
    execute insrt_STAFF(5,'Oliver Finch','OLI','PASSWORD21',5,1,1);
    execute insrt_STAFF(8,'Zachary Ryan','ZAC','PASSWORD22',1,1,1);

    select * from STAFF;
    
---------------------------------------------------- STAFF AVAILABILITY TABLE  -------------------------------------------

    -- TABLE CREATION PROCEDURE
    create or replace procedure staff_avail_creation is table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE STAFF_AVAIL(STAFF_AVL_ID NUMBER GENERATED BY DEFAULT AS IDENTITY, 
                    STAFF_ID NUMBER NOT NULL,
                    STAFF_STATUS VARCHAR(20) NOT NULL,
                    STAFF_AVL_DT_TIME TIMESTAMP NOT NULL,
                    constraint PK_STAFF_AVL_ID PRIMARY KEY (STAFF_AVL_ID),
                    constraint FK_STAFF_ID FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID))';
       EXECUTE IMMEDIATE table_name;
    end staff_avail_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            tname:='STAFF_AVAIL';
            SELECT count(*) into nCount FROM user_tables where table_name = tname;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||tname || ' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 staff_avail_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' || tname ||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('Table '||tname ||' doesnt exits! So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 staff_avail_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
    create or replace procedure insrt_staff_avail(STAFF_ID in varchar,STAFF_STATUS IN varchar, STAFF_AVL_DT_TIME IN date)
    AS
          begin
          
                 dbms_output.put_line('----------------------------------------------------------');
                insert into STAFF_AVAIL(STAFF_ID,STAFF_STATUS,STAFF_AVL_DT_TIME) values (STAFF_ID,STAFF_STATUS,STAFF_AVL_DT_TIME);
             dbms_output.put_line('Row inserted at STAFF AVAILABILITY table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                ROLLBACK;
                when others then
                    dbms_output.put_line('Error while inserting data in STAFF AVAILABILITY Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_staff_avail;
     /
    
    execute insrt_staff_avail(1,'LEAVE',TO_DATE('2021/05/11 23:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(2,'AVAILABLE',TO_DATE('2021/05/13 23:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(3,'LEAVE',TO_DATE('2021/05/02 11:00:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(4,'AVAILABLE',TO_DATE('2021/05/03 03:55:00', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(5,'AVAILABLE',TO_DATE('2021/04/29 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(6,'AVAILABLE',TO_DATE('2021/04/29 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(7,'LEAVE',TO_DATE('2021/04/29 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(8,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(9,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(10,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(11,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(12,'LEAVE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(13,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(14,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(15,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(16,'AVAILABLE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));
    execute insrt_staff_avail(17,'LEAVE',TO_DATE('2021/04/30 11:59:59', 'yy/mm/dd hh24:mi:ss'));

    SELECT * FROM STAFF_AVAIL;

---------------------------------------------------- Room Type TABLE  -------------------------------------------

create or replace procedure room_type_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE ROOM_TYPE(
                            ROOM_TYP_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            ROOM_TYP_DESC VARCHAR2(255) NOT NULL UNIQUE,
                            NO_OF_BEDS NUMBER NULL,
                            STNDRD_RATE FLOAT NOT NULL,
                            constraint pk_room_typ_id PRIMARY KEY(ROOM_TYP_ID)
                    )';
       EXECUTE IMMEDIATE table_name;
    end room_type_creation;
    /
    
      DECLARE
            tName varchar2(50);
            nCount NUMBER;
        BEGIN
            tName:='ROOM_TYPE';
            SELECT count(*) into nCount FROM user_tables where table_name = tName;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| tName||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 room_type_creation;
                end;    
             DBMS_OUTPUT.PUT_LINE('TABLE '||tName||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 room_type_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_room_type(roomtype_desc_name in varchar2,no_of_beds_name in number,standard_rate_name in float)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                  insert into ROOM_TYPE(ROOM_TYP_DESC,NO_OF_BEDS,STNDRD_RATE) values (roomtype_desc_name,no_of_beds_name,standard_rate_name);
                 dbms_output.put_line('Row inserted at RoomType table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Location Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_room_type;
     /
 
     execute insrt_room_type('Delux',2,1500);
     execute insrt_room_type('PentHouse',4,5000);
     execute insrt_room_type('Presidential Suite',4,10000);  
     execute insrt_room_type('Studio',1,1000);       
     
     select * from room_type;

---------------------------------------------------- Room Status -------------------------------------------

-- TABLEC REATION PROCEDURE
    create or replace procedure room_status_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE ROOM_STATUS(
                            ROOM_STS_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            ROOM_STS_TIMESTAMP TIMESTAMP NOT NULL,
                            ROOM_STS VARCHAR2(50) NOT NULL,
                            constraint pk_room_status_id PRIMARY KEY(ROOM_STS_ID)
                    )';
       EXECUTE IMMEDIATE table_name;
    end room_status_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='ROOM_STATUS';
            SELECT count(*) into nCount FROM user_tables where table_name = 'ROOM_STATUS';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 room_status_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' ||table_name ||' CREATED');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 room_status_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_room_status(room_status_timestamp in timestamp, room_status in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  ROOM_STATUS(ROOM_STS_TIMESTAMP, ROOM_STS) values (room_status_timestamp, room_status);
             dbms_output.put_line('Row inserted at ROOM_STATUS table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Room Status Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_room_status;
     /
    
    execute insrt_room_status(SYSDATE,'Clean');
    execute insrt_room_status(SYSDATE,'Not Clean');
    execute insrt_room_status(SYSDATE,'Cleaning in Progress');
    execute insrt_room_status(SYSDATE,'Out of Order');
    
    select * from room_status;


---------------------------------------------------- ROOM AVAILABILITY -------------------------------------------

-- TABLE CREATION PROCEDURE
    create or replace procedure room_availability_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE ROOM_AVAILABILITY(
                            ROOM_AVL_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            ROOM_STS_ID  NUMBER NOT NULL,
                            IS_AVAILABLE VARCHAR2(50) NOT NULL,
                            STAFF_ID NUMBER NOT NULL,
                            AVL_TIME_STAMP TIMESTAMP NOT NULL,
                            constraint pk_room_avl_id PRIMARY KEY(ROOM_AVL_ID),
                            constraint fk_room_sts_id FOREIGN KEY(ROOM_STS_ID) REFERENCES room_status(room_sts_id),
                            constraint fk_room_staff_id FOREIGN KEY(STAFF_ID) REFERENCES staff (staff_id)
                    )';
       EXECUTE IMMEDIATE table_name;
    end room_availability_creation;
    /
    
      DECLARE
      
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='ROOM_AVAILABILITY';
            SELECT count(*) into nCount FROM user_tables where table_name = 'ROOM_AVAILABILITY';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 room_availability_creation;
                end;    
             DBMS_OUTPUT.PUT_LINE('TABLE '||table_name||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 room_availability_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_room_availability(room_sts_id_name in number,is_avail in varchar,staff_id in number,avl_timestamp in timestamp)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into ROOM_AVAILABILITY(ROOM_STS_ID,IS_AVAILABLE,STAFF_ID,AVL_TIME_STAMP) values (room_sts_id_name,is_avail,staff_id,avl_timestamp);
             dbms_output.put_line('Row inserted at Room Availability table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Room Availability Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_room_availability;
     /
    
    execute insrt_room_availability(1,'Available',11,TO_DATE('2021/05/01 10:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(2,'Available',16,TO_DATE('2021/05/03 15:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(3,'Available',3,TO_DATE('2021/05/08 05:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(2,'Not Available',18,TO_DATE('2021/05/15 20:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(4,'Not Available',12,TO_DATE('2021/06/29 23:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(4,'Not Available',13,TO_DATE('2021/06/20 23:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(4,'Not Available',14,TO_DATE('2021/05/25 23:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(4,'Not Available',15,TO_DATE('2021/06/30 23:59:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(2,'Available',16,TO_DATE('2021/05/21 12:55:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(2,'Available',17,TO_DATE('2021/06/12 20:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(1,'Available',18,TO_DATE('2021/06/01 10:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(1,'Available',3,TO_DATE('2021/05/29 15:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(1,'Not Available',4,TO_DATE('2021/05/11 05:30:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(1,'Available',10,TO_DATE('2021/05/05 16:30:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(3,'Available',8,TO_DATE('2021/05/10 10:20:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(3,'Available',9,TO_DATE('2021/05/19 15:45:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(3,'Not Available',7,TO_DATE('2021/05/25 10:50:59', 'yyyy/mm/dd hh24:mi:ss'));
    execute insrt_room_availability(1,'Available',16,TO_DATE('2021/06/06 11:50:59', 'yyyy/mm/dd hh24:mi:ss'));
    
    select * from room_availability;

---------------------------------------------------- Rack Rate Card -------------------------------------------
    -- TABLEC REATION PROCEDURE
    create or replace procedure rack_rate_card_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:= 'CREATE TABLE RACK_RATECARD(
            RACK_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
            RACK_AMOUNT FLOAT NOT NULL unique,
            constraint PK_RACK_ID PRIMARY KEY(RACK_ID)
            )';

    EXECUTE IMMEDIATE table_name;
    end rack_rate_card_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:= 'RACK_RATECARD';
            SELECT count(*) into nCount FROM user_tables where table_name = 'RACK_RATECARD';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 rack_rate_card_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE '||TABLE_NAME||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 rack_rate_card_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_rack_ratecard(RACK_AMOUNT_name in FLOAT)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  RACK_RATECARD(RACK_AMOUNT) values (RACK_AMOUNT_name);
             dbms_output.put_line('Row inserted at RACK_RATECARD table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in RACK RATECARD Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_rack_ratecard;
     /
    
    execute insrt_rack_ratecard(5000);

    execute insrt_rack_ratecard(2000);
    execute insrt_rack_ratecard(2500);
    execute insrt_rack_ratecard(3000);
    execute insrt_rack_ratecard(3500);
    execute insrt_rack_ratecard(4000);
    execute insrt_rack_ratecard(4500);
    execute insrt_rack_ratecard(5000);
    execute insrt_rack_ratecard(5500);
    execute insrt_rack_ratecard(6000);
    execute insrt_rack_ratecard(6500);
    execute insrt_rack_ratecard(7000);
    execute insrt_rack_ratecard(7500);
    execute insrt_rack_ratecard(8000);
    execute insrt_rack_ratecard(8500);
    execute insrt_rack_ratecard(9000);
    execute insrt_rack_ratecard(9500);
    execute insrt_rack_ratecard(10000); 
    
    select * from RACK_RATECARD;

---------------------------------------------------- Annual Rate Card -------------------------------------------

-- TABLE CREATION PROCEDURE
    create or replace procedure annual_rate_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE ANNUAL_RATE(
                            ANNUAL_RATE_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            RACK_ID NUMBER NOT NULL,
                            ANNUAL_RATE_DATE TIMESTAMP NOT NULL,
                            HOTEL_ID NUMBER NOT NULL,
                            constraint pk_annual_rate_id PRIMARY KEY(ANNUAL_RATE_ID),
                            constraint fk_rk_id FOREIGN KEY(RACK_ID) REFERENCES rack_ratecard(rack_id),
                            constraint fk_htl_id FOREIGN KEY(HOTEL_ID) REFERENCES hotel(hotel_id)
                    )';
       EXECUTE IMMEDIATE table_name;
    end annual_rate_creation;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='ANNUAL_RATE';
            SELECT count(*) into nCount FROM user_tables where table_name = 'ANNUAL_RATE';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name ||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 annual_rate_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' ||table_name ||' CREATED');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 annual_rate_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_annual_rate(rack_id_name in number, annual_rate_date in timestamp,hotel_id_name in number)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into  ANNUAL_RATE(RACK_ID, ANNUAL_RATE_DATE,HOTEL_ID) values (rack_id_name, annual_rate_date,hotel_id_name);
             dbms_output.put_line('Row inserted at Anuua_Rate table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in Location Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_annual_rate;
     /

    execute insrt_annual_rate(1,TO_DATE('2021/04/25 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(7,TO_DATE('2021/04/26 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(16,TO_DATE('2021/04/27 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(17,TO_DATE('2021/04/28 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(18,TO_DATE('2021/04/29 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(17,TO_DATE('2021/04/30 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(14,TO_DATE('2021/05/01 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(5,TO_DATE('2021/08/15 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(12,TO_DATE('2022/01/31 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(10,TO_DATE('2019/10/10 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),1);
    execute insrt_annual_rate(1,TO_DATE('2021/04/25 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_annual_rate(8,TO_DATE('2021/04/26 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
     execute insrt_annual_rate(17,TO_DATE('2021/04/27 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_annual_rate(16,TO_DATE('2021/04/28 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_annual_rate(17,TO_DATE('2021/04/29 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_annual_rate(16,TO_DATE('2021/04/30 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);
    execute insrt_annual_rate(14,TO_DATE('2021/05/01 23:59:59', 'yyyy/mm/dd hh24:mi:ss'),2);

    select * from annual_rate;

---------------------------------------------------- Room -------------------------------------------

-- TABLEC REATION PROCEDURE
    create or replace procedure ROOM_creation is table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table ROOM(
                    ROOM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                    ROOM_TYP_ID NUMBER ,
                    ROOM_AVL_ID NUMBER,
                    ROOM_LVL NUMBER,
                    AMENITY_ID NUMBER,
                    HOTEL_ID NUMBER,
                    PRIMARY KEY (ROOM_ID),
                    FOREIGN KEY (ROOM_TYP_ID) REFERENCES ROOM_TYPE(ROOM_TYP_ID),
                    FOREIGN KEY (ROOM_AVL_ID) REFERENCES ROOM_AVAILABILITY(ROOM_AVL_ID),
                    FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL(HOTEL_ID),
                    FOREIGN KEY (AMENITY_ID) REFERENCES AMENITY(AMENITY_ID)
                    )';
                    
       EXECUTE IMMEDIATE table_name;
    end ROOM_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            TNAME:='ROOM';
            SELECT count(*) into nCount FROM user_tables where table_name = TNAME;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||TNAME || ' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 ROOM_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' || TNAME ||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('Table '||TNAME ||' doesnt exits! So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 ROOM_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
    create or replace procedure insrt_ROOM(ROOM_TYP_ID IN NUMBER ,ROOM_AVL_ID  IN NUMBER, ROOM_LVL IN NUMBER,AMENITY_ID IN NUMBER ,HOTEL_ID IN NUMBER)
         as
          begin
          
                 dbms_output.put_line('----------------------------------------------------------');
                insert into ROOM(ROOM_TYP_ID  ,ROOM_AVL_ID  , ROOM_LVL,AMENITY_ID,HOTEL_ID) values (ROOM_TYP_ID  ,ROOM_AVL_ID  , ROOM_LVL,AMENITY_ID,HOTEL_ID);
             dbms_output.put_line('Row inserted at ROOM table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oops! This record already exists');
                ROLLBACK;
                when others then
                    dbms_output.put_line('Error while inserting data in Room Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_ROOM;
     /
     
     execute insrt_room(1,1,4,1,1);
    execute insrt_room(1,2,3,2,1);
    execute insrt_room(1,3,10,3,1);
    execute insrt_room(2,4,12,4,2);
    execute insrt_room(3,5,2,5,2);
    execute insrt_room(3,6,15,6,2);
    execute insrt_room(4,7,8,7,3);
    execute insrt_room(4,8,7,8,3);
    execute insrt_room(5,10,1,9,3);
    execute insrt_room(5,14,17,10,4);
    execute insrt_room(6,18,20,11,4);
    execute insrt_room(6,15,13,1,4);

    select * from room;

    ---------------------------------------------------- house keeping -------------------------------------------

     create or replace procedure house_keeping_creation is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='CREATE TABLE HOUSE_KEEPING(
                            HK_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            ROOM_ID  NUMBER NOT NULL,
                            HK_TIME TIMESTAMP NOT NULL,
                            STAFF_ID NUMBER NOT NULL,
                            constraint pk_hk_id PRIMARY KEY(HK_ID),
                            constraint fk_room_id FOREIGN KEY(ROOM_ID) REFERENCES room (room_id),
                            constraint fk_stf_id FOREIGN KEY(STAFF_ID) REFERENCES staff (staff_id)
                    )';
       EXECUTE IMMEDIATE table_name;
    end house_keeping_creation;
    /
    
      DECLARE
      
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            table_name:='HOUSE_KEEPING';
            SELECT count(*) into nCount FROM user_tables where table_name = 'HOUSE_KEEPING';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '|| table_name||' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 house_keeping_creation;
                end;    
             DBMS_OUTPUT.PUT_LINE('TABLE '||table_name||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 house_keeping_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_house_keeping(room_id_name in number,hk_timestamp in timestamp,staff_id in number)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into HOUSE_KEEPING(ROOM_ID,HK_TIME,STAFF_ID) values (room_id_name,hk_timestamp,staff_id);
             dbms_output.put_line('Row inserted at HOUSE_KEEPING table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
                WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in HOUSE_KEEPING Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_house_keeping;
     /
     
     execute insrt_house_keeping(2,TO_DATE('2021/05/11 10:59:59', 'yyyy/mm/dd hh24:mi:ss'),3);
     execute insrt_house_keeping(3,TO_DATE('2021/04/26 09:45:59', 'yyyy/mm/dd hh24:mi:ss'),5);
     execute insrt_house_keeping(4,TO_DATE('2021/05/01 20:30:59', 'yyyy/mm/dd hh24:mi:ss'),9);
     execute insrt_house_keeping(5,TO_DATE('2021/05/29 05:10:59', 'yyyy/mm/dd hh24:mi:ss'),10);
     execute insrt_house_keeping(6,TO_DATE('2021/05/20 15:05:59', 'yyyy/mm/dd hh24:mi:ss'),4);
     
     select * from house_keeping;

---------------------------------------------------- Booking type -------------------------------------------

 -- TABLEC REATION PROCEDURE
    create or replace procedure BOOKING_TYPE_CREATION is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table BOOKING_TYPE(  
                    bkng_typ_id NUMBER GENERATED BY DEFAULT AS IDENTITY ,  
                    bkng_typ varchar2(20) unique NOT NULL,
                    constraint pk_bkng_tp_id primary key (bkng_typ_id)  
                    )';
                    
       EXECUTE IMMEDIATE table_name;
    end BOOKING_TYPE_CREATION;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            SELECT count(*) into nCount FROM user_tables where table_name = 'BOOKING_TYPE';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE TABLE_NAME ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 BOOKING_TYPE_CREATION;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE TABLE_NAME CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 BOOKING_TYPE_CREATION;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_Booking_Type(bkng_typ_name in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into BOOKING_TYPE(bkng_typ) values (bkng_typ_name);
             dbms_output.put_line('Row inserted at BOOKING_TYPE table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                when others then
                    dbms_output.put_line('Error while inserting data in BOOKING_TYPE Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_Booking_Type;
     /
    
    SET SERVEROUTPUT ON;
    
    -- TABLEC REATION PROCEDURE
    create or replace procedure BOOKING_TYPE_CREATION is
    table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table BOOKING_TYPE(  
                    bkng_typ_id NUMBER GENERATED BY DEFAULT AS IDENTITY ,  
                    bkng_typ varchar2(20) unique NOT NULL,
                    constraint pk_bkng_tp_id primary key (bkng_typ_id)  
                    )';
                    
       EXECUTE IMMEDIATE table_name;
    end BOOKING_TYPE_CREATION;
    /
    
      DECLARE
            table_name varchar2(50);
            nCount NUMBER;
        BEGIN
            SELECT count(*) into nCount FROM user_tables where table_name = 'BOOKING_TYPE';
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE TABLE_NAME ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 BOOKING_TYPE_CREATION;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE TABLE_NAME CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('table doesnt exits!, So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 BOOKING_TYPE_CREATION;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
     create or replace procedure insrt_Booking_Type(bkng_typ_name in varchar)
         as
          begin
                 dbms_output.put_line('----------------------------------------------------------');
                insert into BOOKING_TYPE(bkng_typ) values (bkng_typ_name);
             dbms_output.put_line('Row inserted at BOOKING_TYPE table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oop! This record already exists');
                rollback;
                when others then
                    dbms_output.put_line('Error while inserting data in BOOKING_TYPE Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_Booking_Type;
     /
    
    execute insrt_Booking_Type('INTERNET');
    execute insrt_Booking_Type('WALK-IN');
    execute insrt_Booking_Type('REFERRAL');
    
    --select * from BOOKING_TYPE ;

    
select * from BOOKING_TYPE ;


-- room bookign

SET SERVEROUTPUT ON;
    
    -- TABLEC REATION PROCEDURE
    create or replace procedure ROOM_BOOKING_creation is table_name varchar2(4000);
   
    BEGIN
    -- table creation query
       table_name:='create table ROOM_BOOKING(
                    RESRV_ID NUMBER GENERATED BY DEFAULT AS IDENTITY ,
                    BKNG_ID NUMBER NOT NULL,
                    GUEST_ID NUMBER NOT NULL,
                    NO_OF_GUEST NUMBER NOT NULL,
                    ROOM_TYP_ID NUMBER NOT NULL,
                    AMOUNT FLOAT NOT NULL,
                    AMENITY_ID NUMBER NOT NULL,
                    BKNG_TYP_ID NUMBER NOT NULL,
                    HOTEL_ID NUMBER NOT NULL,
                    NO_OF_ROOM INTEGER NOT NULL,
                    IS_MAIN CHAR(1) NOT NULL,
                    PRIMARY KEY(RESRV_ID),
                    FOREIGN KEY(GUEST_ID) REFERENCES GUEST(GUEST_ID),
                    FOREIGN KEY(HOTEL_ID) REFERENCES HOTEL(HOTEL_ID)
                    )';
                    
       EXECUTE IMMEDIATE table_name;
    end ROOM_BOOKING_creation;
    /
    
      DECLARE
            tname varchar2(50);
            nCount NUMBER;
        BEGIN
            TNAME:='ROOM_BOOKING';
            SELECT count(*) into nCount FROM user_tables where table_name = TNAME;
            IF(nCount > 0)
            
            THEN
                    DBMS_OUTPUT.PUT_LINE('TABLE '||TNAME || ' ALREADY EXISTS.');
            ELSE
            -- call to table creation stored procedure 
                begin 
                 ROOM_BOOKING_creation;
                end;    
            DBMS_OUTPUT.PUT_LINE('TABLE ' || TNAME ||' CREATED.');
            
            END IF;
            exception 
              when no_data_found then
               dbms_output.put_line('Table '||TNAME ||' doesnt exits! So we created one');
               
               -- call to table creation stored procedure 
               begin 
                 ROOM_BOOKING_creation;
                end; 
                
                when others
                    then
                    dbms_output.put_line('Something went wrong!');
                    dbms_output.put_line(dbms_utility.format_error_stack);
    END;
    /  
    
    create or replace procedure insrt_ROOM_BOOKING(BKNG_ID IN NUMBER ,GUEST_ID IN NUMBER , NO_OF_GUEST IN NUMBER,ROOM_TYP_ID IN NUMBER,AMOUNT IN FLOAT,AMENITY_ID IN NUMBER,BKNG_TYP_ID IN NUMBER,HOTEL_ID IN NUMBER,NO_OF_ROOM IN NUMBER,IS_MAIN IN CHAR)
         as
          begin
          
                 dbms_output.put_line('----------------------------------------------------------');
                insert into ROOM_BOOKING(BKNG_ID  ,GUEST_ID  , NO_OF_GUEST,ROOM_TYP_ID,AMOUNT,AMENITY_ID,BKNG_TYP_ID,HOTEL_ID,NO_OF_ROOM,IS_MAIN) values (BKNG_ID  ,GUEST_ID  , NO_OF_GUEST,ROOM_TYP_ID,AMOUNT,AMENITY_ID,BKNG_TYP_ID,HOTEL_ID,NO_OF_ROOM,IS_MAIN);
             dbms_output.put_line('Row inserted at ROOM table');
                 dbms_output.put_line('----------------------------------------------------------');
            commit;
            exception
            WHEN DUP_VAL_ON_INDEX
                then
                dbms_output.put_line('Oops! This record already exists');
                ROLLBACK;
                when others then
                    dbms_output.put_line('Error while inserting data in Room BOOKING Table');
                    rollback;
                    dbms_output.put_line('The error encountered is: ');
                    dbms_output.put_line(dbms_utility.format_error_stack);
                    dbms_output.put_line('----------------------------------------------------------');
            end insrt_ROOM_BOOKING;
     /
     
     
     
EXECUTE insrt_ROOM_BOOKING(1  ,1  , 5,1,76,1,1,1,3,'Y');



--SELECT * FROM ROOM_BOOKING;